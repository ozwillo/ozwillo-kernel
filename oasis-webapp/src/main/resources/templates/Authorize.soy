/**
 * Ozwillo Kernel
 * Copyright (C) 2015  The Ozwillo Kernel Authors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
{namespace oasis}

/**
 * Authorization page.
 */
{template .authorize}
{@param  appId:          string} /** application ID. */
{@param  appName:        string} /** application name. */
{@param  formAction:     string} /** URL to post the form to. */
{@param  cancelUrl:      string} /** URL to go to when cancelling. */
{@param  requiredScopes: list<string>} /** list of requested (and thus required) scope IDs. */
{@param  missingScopes:           list<[id: string, title: string|null, description: string|null]>} /** list of requested (and thus required) but not yet granted scopes. */
{@param  optionalScopes:          list<[id: string, title: string|null, description: string|null]>} /** list of optional (pre-registered but not requested) scopes. */
{@param  alreadyAuthorizedScopes: list<[id: string, title: string|null, description: string|null]>} /** list of already-granted scopes. */
{@param  redirect_uri:   string} /** 'redirect_uri' request parameter */
{@param? state:          string} /** 'state' request parameter */
{@param? nonce:          string} /** 'nonce' request parameter */
{@param? code_challenge: string} /** 'code_challenge' request parameter */
{@param? askForClientCertificate: [manageCertificatesUrl: string, hasRegisteredCertificate: bool, currentCert: null|[addFormAction: string, continueUrl: string, subject: string, issuer: string, linkedToOtherAccount: bool|null]]}
{@param  claims: map<string, [value: html|string|null, alreadyAuthorized: bool, essential: bool]>} /** list of scope name and value. */
{@param  allClaimsAlreadyAuthorized:        bool}   /** if all profile scope are authorized  */
{@param  essentialClaimMissing:             bool}   /** for disabling the submit button when claims are empty */
{@param? updateProfileUrl:                  string} /** url to update the profile */
{@param? updateProfileOrigin:               string} /** url of the origin to check the post message */
{@inject brand_info:                        map<string,string>}
{call .page}
  {param title kind="text"}{msg desc="Authorization page title"}Authorize {$appName}{/msg}{/param}
  {param content kind="html"}
<style>
h1 {lb} font-weight: lighter; font-size: 1.8em; text-align: center; {rb}
button {lb}
  margin: 5px 1em;
  padding: .5em 2em;
  border: 1px solid {$brand_info['button_text_color']};
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
{rb}
button {lb}
  background: {$brand_info['main_color_dark']}; color: {$brand_info['button_text_color']};
{rb}
a {lb} color: {$brand_info['text_color']}; {rb}

button:disabled {lb}
  opacity: 0.7;
  cursor: default;
{rb}
</style>
  <h1>{msg desc="Some app needs authorizations"}
    {$appName} needs some authorizations
  {/msg}</h1>

  {if $askForClientCertificate}
    <div style="background: {$brand_info['warning_background_color']}; color: {$brand_info['warning_text_color']}; border-radius: 10px; padding: .5em; margin: 2.5em auto; max-width: 500px">
      {call .askForClientCertificatePartial data="$askForClientCertificate"}
        {param appName: $appName /}
      {/call}
    </div>
  {/if}

  <form method="POST" action="{$formAction}">
    <input type="hidden" name="_utf8" value="&#9731;">
    <input type="hidden" name="client_id" value="{$appId}">
    {for $scope in $requiredScopes}
      <input type="hidden" name="scope" value="{$scope}">
    {/for}
    {for $claim in mapKeys($claims)}
      <input type="hidden" name="claim" value="{$claim}">
    {/for}
    <input type="hidden" name="redirect_uri" value="{$redirect_uri}">
    {if $state}
      <input type="hidden" name="state" value="{$state}">
    {/if}
    {if $nonce}
      <input type="hidden" name="nonce" value="{$nonce}">
    {/if}
    {if $code_challenge}
      <input type="hidden" name="code_challenge" value="{$code_challenge}">
    {/if}
    <div>
      <p>{msg desc="Introduce list of required (and not already granted) scopes"}
        {$appName} would like to:
      {/msg}</p>
      <ul>
        {if not $allClaimsAlreadyAuthorized}
          {call .claims data="all" /}
        {/if}
        {for $scope in $missingScopes}
          {call .scopeField data="$scope"}
            {param inputType: 'hidden' /}
          {/call}
        {/for}
      </ul>
      <div style="text-align: center">
        <button type="submit" {if $essentialClaimMissing}disabled{/if}>
          {msg desc="Button to grant the scopes"}Grant it{/msg}
        </button>
        <a href="{$cancelUrl}" class=cancel>
          {msg desc="Button to cancel (and return error to the app)"}Cancel{/msg}
        </a>
      </div>
    </div>

    {if $optionalScopes and length($optionalScopes)}
      <div>
        <p>{msg desc="Introduce list of 'needed scopes' declared but neither granted nor required"}
          {$appName} may later need to do the following; you can authorize it in advance by checking the boxes:
        {/msg}</p>
        <ul>
          {for $scope in $optionalScopes}
            {call .scopeField data="$scope"}
              {param inputType: 'checkbox' /}
            {/call}
          {/for}
        </ul>
      </div>
    {/if}

    {if ($alreadyAuthorizedScopes and length($alreadyAuthorizedScopes)) or $claims}
      <div>
        <p>{msg desc="Introduce list of already authorized scopes"}
          You have already authorized {$appName} to:
        {/msg}</p>
        <ul>
          {if $allClaimsAlreadyAuthorized}
            {call .claims data="all" /}
          {/if}
          {for $scope in $alreadyAuthorizedScopes}
            {call .scope data="$scope" /}
          {/for}
        </ul>
      </div>
    {/if}
  </form>
  <script>
    {if $updateProfileOrigin}
      function receiveMessage(event) {lb}
        if (event.origin !== "{$updateProfileOrigin}") return;

        location.reload();
      {rb}
      window.addEventListener("message", receiveMessage, false);
    {/if}
  </script>
  {/param}
{/call}
{/template}

/**
 * Asks for a client certificate.
 */
{template .askForClientCertificate}
{@param  appId:                   string} /** application ID. */
{@param  appName:                 string} /** application name. */
{@param  formAction:              string} /** URL to post the form to. */
{@param  cancelUrl:               string} /** URL to go to when cancelling. */
{@param  scopes:                  list<string>} /** list of requested (and thus required) scope IDs. */
{@param  claims:                  list<string>} /** list of requested claim names. */
{@param  redirect_uri:            string} /** 'redirect_uri' request parameter */
{@param? state:                   string} /** 'state' request parameter */
{@param? nonce:                   string} /** 'nonce' request parameter */
{@param? code_challenge:          string} /** 'code_challenge' request parameter */
{@param  askForClientCertificate: [manageCertificatesUrl: string, hasRegisteredCertificate: bool, currentCert: null|[addFormAction: string, continueUrl: string, subject: string, issuer: string, linkedToOtherAccount: bool|null]]}
{@inject brand_info:              map<string,string>}

{call .page}
  {param title kind="text"}{msg desc="Authorization page title"}Authorize {$appName}{/msg}{/param}
  {param content kind="html"}
<style>
h1 {lb} font-weight: lighter; font-size: 1.8em; text-align: center; {rb}
button {lb}
  margin: 5px 1em;
  padding: .5em 2em;
  border: 1px solid {$brand_info['button_text_color']};
  cursor: pointer;
  text-decoration: none;
  display: inline-block;
{rb}
button {lb}
  background: {$brand_info['main_color_dark']}; color: {$brand_info['button_text_color']};
{rb}
button.continue, a.cancel {lb}
  background: {$brand_info['main_background_color']}; color: {$brand_info['main_color']};
{rb}
a {lb} color: {$brand_info['text_color']}; {rb}
</style>
  <h1>{msg desc="Some app asks for stronger authentication (client certificate)"}
    {$appName} asks for stronger authentication
  {/msg}</h1>

  {call .askForClientCertificatePartial data="$askForClientCertificate"}
    {param appName: $appName /}
  {/call}

  <form method="POST" action="{$formAction}">
    <input type="hidden" name="_utf8" value="&#9731;">
    <input type="hidden" name="client_id" value="{$appId}">
    {for $scope in $scopes}
      <input type="hidden" name="scope" value="{$scope}">
    {/for}
    {for $claim in $claims}
      <input type="hidden" name="claim" value="{$claim}">
    {/for}
    <input type="hidden" name="redirect_uri" value="{$redirect_uri}">
    {if $state}
      <input type="hidden" name="state" value="{$state}">
    {/if}
    {if $nonce}
      <input type="hidden" name="nonce" value="{$nonce}">
    {/if}
    {if $code_challenge}
      <input type="hidden" name="code_challenge" value="{$code_challenge}">
    {/if}
    <div style="text-align: center">
      <button type="submit" class=continue>
        {msg desc="Button to continue without client certificate"}Continue without certificate{/msg}
      </button>
      <a href="{$cancelUrl}" class=cancel>
        {msg desc="Button to cancel (and return error to the app)"}Cancel{/msg}
      </a>
    </div>
  </form>
  {/param}
{/call}
{/template}

/**
 * Asks for a client certificate (partial shared between standalone page and 'authorize' page).
 */
{template .askForClientCertificatePartial visibility="private"}
  {@param  appName:                  string} /** application name. */
  {@param  manageCertificatesUrl:    string} /** URL to manage user's certificates. */
  {@param  hasRegisteredCertificate: bool}   /** Whether the user has registered certificate(s) */
  {@param? currentCert: [addFormAction: string, continueUrl: string, subject: string, issuer: string, linkedToOtherAccount: bool|null]}

  <p>{msg desc="App asks for authentication using client certificate"}
    {$appName} asks that you authenticate using a certificate.
  {/msg}</p>
  {if $hasRegisteredCertificate}
    <p>{msg desc="Ask user to present client certificate"}
      Please insert your certificate and refresh the page to take it into account.
    {/msg}</p>
    {if $currentCert}
      {if $currentCert.linkedToOtherAccount}
        <p>{msg desc="User certificate is linked to another account (error message)"}
          This certificate is linked to another account.
          Insert another one and refresh the page to take it into account.
        {/msg}</p>
      {else}
        <p>{msg desc="User certificate is not linked to account"}
          This certificate is not linked to your account.
          You can add it to start using it now.
        {/msg}</p>
      {/if}
      <style>
      .cert {lb} display: flex; align-items: center; margin: 1em 0; {rb}
      .certInfo {lb} flex: auto; {rb}
      .certInfo>p {lb} margin: 0; {rb}
      /* IE10 compat: */
      .cert {lb} display: -ms-flexbox; -ms-flew-align: center; {rb}
      .certInfo {lb} -ms-flex: auto; {rb}
      </style>
      {call .currentCertificate data="$currentCert" /}
    {elseif $hasRegisteredCertificate}
      <p>{msg desc="Ask user to present client certificate"}
        Please insert your certificate and refresh the page to take it into account.
      {/msg}</p>
    {/if}
    <p>{msg desc="Link to manage user's certificates"}
      You can manage your certificates <a href="{$manageCertificatesUrl}" target=_blank>here</a>,
      then refresh this page to take your certificate into account.
    {/msg}</p>
  {/if}
  <p>{msg desc="Authorization can continue without certificate (voluntary claim)"}
    Note that you can continue without presenting a certificate.
    {sp}
    {$appName} will be informed so it could adapt its behavior accordingly.
  {/msg}</p>
{/template}

/**
 * Displays a single scope field in the Authorization page.
 */
{template .scopeField visibility="private"}
  {@param  inputType:   string} /** type of the 'selected_scope' input field. */
  {@param  id:          string} /** identifier for the scope. */
  {@param? title:       string} /** scope's title. */
  {@param? description: string} /** scope's description. */

  {call .scope}
    {param id: $id /}
    {param title kind="html"}
      {switch $inputType}
        {case 'hidden'}
          <input type="{$inputType}" name="selected_scope" value="{$id}">
          {$title ? $title : $id}
        {default}
          <label>
            <input type="{$inputType}" name="selected_scope" value="{$id}">
            {sp}
            {$title ? $title : $id}
          </label>
      {/switch}
    {/param}
    {param description: $description /}
  {/call}
{/template}


/**
 * Displays a single scope in the Authorization page.
 */
{template .scope visibility="private"}
  {@param  id:          string}      /** scope's id. */
  {@param? title:       string|html} /** scope's title. */
  {@param? description: string}      /** scope's description. */
  <dl>
    <dt>{$title ? $title : $id}</dt>
    <dd>{$description}</dd>
  </dl>
{/template}

/**
 * Displays the profile information
 */
{template .claims visibility="private"}
  {@param  claims: map<string, [value: html|string|null, alreadyAuthorized: bool, essential: bool]>} /** List of scope name and value. */
  {@param  allClaimsAlreadyAuthorized:        bool}   /** When all the scope have been already authorized. */
  {@param? updateProfileUrl:                  string} /** url to update the profile */
  {@inject brand_info:                        map<string,string>}

<style>
.row-claim {lb}
  display: flex;
  padding: .5em .5em .5em 0;
  flex-wrap: wrap;
{rb}
.row-required {lb}
  color: {$brand_info['claim_required_text_color']};
  font-weight: bold;
{rb}
.row-need-auth {lb}
  color: {$brand_info['claim_need_auth_text_color']};
  font-weight: bold;
{rb}
.claim-name {lb}
  min-width: 30%;
{rb}
.claim-value {lb}
  flex: 1;
{rb}
.claim-value p {lb}
  margin: 0px;
{rb}
</style>
  <dl>
    <dt>
      {msg desc="Introduce claims being authorized"}
        View the following information about you:
      {/msg}
    </dt>
    <dd>

      {if $claims['email']}
        {call .oneClaim data="$claims['email']"}
          {param label kind="text"}
            {msg desc="label of email profile information during authorizations"}
                Email:
            {/msg}
          {/param}
          {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
        {/call}
      {/if}

      {if $claims['locale']}
        {call .oneClaim data="$claims['locale']"}
          {param label kind="text"}
            {msg desc="label of locale profile information during authorizations"}
                Locale:
            {/msg}
          {/param}
          {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
        {/call}
      {/if}

      {if $claims['nickname']}
        {call .oneClaim data="$claims['nickname']"}
          {param label kind="text"}
            {msg desc="label of nickname profile information during authorizations"}
                Nickname:
            {/msg}
          {/param}
          {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
        {/call}
      {/if}

      {if ($claims['name'])}
      {call .oneClaim data="$claims['name']"}
        {param label kind="text"}
          {msg desc="label of name profile information during authorizations"}
            Full name:
          {/msg}
        {/param}
        {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
      {/call}
      {/if}

      {if $claims['given_name']}
        {call .oneClaim data="$claims['given_name']"}
          {param label kind="text"}
            {msg desc="label of given_name profile information during authorizations"}
                Given name:
            {/msg}
          {/param}
          {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
        {/call}
      {/if}

      {if $claims['middle_name']}
        {call .oneClaim data="$claims['middle_name']"}
          {param label kind="text"}
            {msg desc="label of middle_name profile information during authorizations"}
                Middle name:
            {/msg}
          {/param}
          {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
        {/call}
      {/if}

      {if $claims['family_name']}
      {call .oneClaim data="$claims['family_name']"}
        {param label kind="text"}
          {msg desc="label of family_name profile information during authorizations"}
            Family name:
          {/msg}
        {/param}
        {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
      {/call}
      {/if}

      {if $claims['birthdate']}
        {call .oneClaim data="$claims['birthdate']"}
          {param label kind="text"}
            {msg desc="label of birthdate profile information during authorizations"}
                Birthdate:
            {/msg}
          {/param}
          {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
        {/call}
      {/if}

      {if $claims['phone_number']}
        {call .oneClaim data="$claims['phone_number']"}
          {param label kind="text"}
            {msg desc="label of phone_number profile information during authorizations"}
                Phone:
            {/msg}
          {/param}
          {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
        {/call}
      {/if}

      {if $claims['gender']}
      {call .oneClaim}
        {param label kind="text"}
          {msg desc="label of gender profile information during authorizations"}
              Gender:
          {/msg}
        {/param}
        {param value kind="text"}
          {switch $claims['gender'].value}
            {case 'male'}
              {msg desc="label of gender male during authorizations"}
                  Male
              {/msg}
            {case 'female'}
            {msg desc="label of gender female during authorizations"}
                Female
            {/msg}
            {default}
            {if $claims['gender'].value}{$claims['gender'].value}{/if}
          {/switch}
        {/param}
        {param alreadyAuthorized: $claims['gender'].alreadyAuthorized /}
        {param essential: $claims['gender'].essential /}
        {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
      {/call}
      {/if}

      {if $claims['address']}
      {call .oneClaim}
        {param label kind="text"}
          {msg desc="label of address profile information during authorizations"}
              Address:
          {/msg}
        {/param}
        {param value kind="html"}
          {if $claims['address'].value}{$claims['address'].value}{/if}
        {/param}
        {param alreadyAuthorized: $claims['address'].alreadyAuthorized /}
        {param essential: $claims['address'].essential /}
        {param allClaimsAlreadyAuthorized: $allClaimsAlreadyAuthorized /}
      {/call}
      {/if}

      {if $updateProfileUrl}
        <div style="text-align: right; margin-right: 0.7em;">
            <a href="{$updateProfileUrl}"
               onclick="window.open('{$updateProfileUrl}', 'popup', 'scrollbars=1,resizable=1,height=860,width=770'); return false;"
            >
              {msg desc="update profile"}
                Update profile
              {/msg}
            </a>
        </div>
      {/if}
    </dd>
  </dl>

{/template}

/**
* Display one claim
*/
{template .oneClaim visibility="private"}
  {@param label:                      string}
  {@param value:                      html|string|null}
  {@param alreadyAuthorized:          bool}
  {@param essential:                  bool}
  {@param allClaimsAlreadyAuthorized: bool}

<div class="row-claim {if $essential and not $value}row-required{elseif not $alreadyAuthorized}row-need-auth{/if}">
  <div class="claim-name">{$label}</div>
  <div class="claim-value">
    {if $value}{$value}{/if}
  </div>
  {if not $allClaimsAlreadyAuthorized}
    <div class="claim-info">
      {if not $value and $essential}
        {msg desc="required"}
            (required)
        {/msg}
      {elseif $alreadyAuthorized}
        {msg desc="already authorized"}
            (already authorized)
        {/msg}
      {/if}
    </div>
  {/if}
</div>
{/template}
